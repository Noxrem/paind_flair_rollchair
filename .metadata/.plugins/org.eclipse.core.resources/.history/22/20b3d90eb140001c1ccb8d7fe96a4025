/*
 * myTasks.c
 *
 *  Created on: 21.10.2021
 *      Author: Noxrem
 */

#include "myTasks.h"
#include "McuRTOS.h"
#include <stdint.h>
#include <stdio.h>
#include "mySystemView.h"

static uint32_t taskParam1 = 5;
//static uint32_t taskParam2 = 10;
static TaskHandle_t myTaskHndl = NULL;
static TaskHandle_t mainTaskHndl = NULL;

static void myTask(void *pv)
{
	uint32_t param = *(uint32_t*)pv;
	//printf("myTask param is %d\n", (int)param);

	myInterrupt();
	param = param + 2;
	mySystemView_Test();
	while(1)
	{
		//McuSystemView_OnUserStart(1);
		//printf("Hallo\n");
		//McuSystemView_OnUserStop(1);
		__asm volatile("nop");
		vTaskDelay(pdMS_TO_TICKS(500));		// wait for 500 ms
	}
}

static void MainTask(void *pv)
{
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(500));		// wait for 500 ms
		int i = 3;
		i++;
		i = 4+20;
		vTaskPrioritySet(mainTaskHndl, tskIDLE_PRIORITY+2);
		//vTaskDelete(mainTaskHndl);		// Delete this task
	}
}

// Quiz exercise SW05
static void myTaskDick(void *pv)
{
	//printf("Ich bin Dick.\n");
	while(1){
		__asm("nop");
		vTaskDelay(pdMS_TO_TICKS(500));		// wait for 500 ms
	}	// endless loop
}

static void myTaskDoof(void *pv)
{
	//printf("Ich bin Doof.\n");
	while(1){
		__asm("nop");
		vTaskDelay(pdMS_TO_TICKS(200));
	}	// endless loop
}

void MyTasks_Init(void)
{
	McuRTOS_Init();	// Initialize RTOS
	mySystemView_Init();	// Initialize system view
	BaseType_t res;
	res = xTaskCreate(myTask, "myTask1", 400/sizeof(StackType_t), &taskParam1, tskIDLE_PRIORITY+1, &myTaskHndl);
	if(res!=pdPASS)
	{
		/* error */
		while(1){}
	}

//	res = xTaskCreate(myTask, "myTask2", 400/sizeof(StackType_t), &taskParam2, tskIDLE_PRIORITY+1, NULL);
//	if(res!=pdPASS)
//	{
//	/* error */
//	while(1){}
//	}

	if(xTaskCreate(
			MainTask,					/* pointer to the task */
			"Main",						/* task name for kernel awareness debugging */
			600/sizeof(StackType_t),	/* task stack size */
			(void*)NULL,				/* optional task startup argument */
			tskIDLE_PRIORITY+1,			/* initial priority */
			&mainTaskHndl			/* optional task handle to create */
			) != pdPASS)
	{
		while(1){}	/* error! probably out of memory */
	}

	// Task Dick
	res = xTaskCreate(myTaskDick, "Dick", 200/sizeof(StackType_t), (void*)NULL, tskIDLE_PRIORITY+2, NULL);
	if(res!=pdPASS)
	{
		/*error*/
		while(1){}
	}

	// Task Doof
	res = xTaskCreate(myTaskDoof, "Doof", 200/sizeof(StackType_t), (void*)NULL, tskIDLE_PRIORITY+3, NULL);
	if(res!=pdPASS)
	{
		/*error*/
		while(1){}
	}
}
