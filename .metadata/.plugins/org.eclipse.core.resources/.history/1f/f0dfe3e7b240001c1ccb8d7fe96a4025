/*
 * Copyright (c) 2021, Erich Styger
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */
#ifndef CCOUNTER_H_
#define CCOUNTER_H_

#include <stdint.h>
#include "fsl_common.h"

/*! global variables used for efficient access */
extern uint32_t CCounter_startCounter, CCounter_stopCounter;

#if defined(CPU_MK22FN512VDC12)
  #define CCOUNTER_GetCycleCounter()  (*((volatile uint32_t*)0xE0001004))
  /*!< macro to access hardware cycle counter */

  /*! Macros to start/stop measurement */
  #define CCOUNTER_START()  CCounter_startCounter=CCOUNTER_GetCycleCounter()
  #define CCOUNTER_STOP()   CCounter_stopCounter=CCOUNTER_GetCycleCounter()
#elif defined(CPU_LPC845M301JBD48)
  #include "ctimer.h"

  /*! Macros to start/stop measurement */
  #define CCOUNTER_START()  CCounter_startCounter=0; CT_TIMER_RESET()
  #define CCOUNTER_STOP()   CCounter_stopCounter=CT_TIMER_GET_VALUE()
#endif


/*! brief Helper routine to print time spent between start and stop */
void CCounter_LogTime(const char *msg);

/*! \brief run several cycle and time counting tests */
void CCounter_Test(void);

/*! \brief Module de-initialization */
void CCounter_DeInit(void);

/*! \brief Module initialization */
void CCounter_Init(void);

#endif /* CCOUNTER_H_ */
