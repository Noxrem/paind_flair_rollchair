/*
 * Copyright (c) 2021, Erich Styger
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "cycle_counter.h"
#include "fsl_common.h"
#include <stdio.h>
#if defined(CPU_LPC845M301JBD48)
  #include "ctimer.h" /* LPC does not have hardware cycle counter: use timer instead */
#endif

#if defined(CPU_MK22FN512VDC12)
  /*! \todo determine overhead for measurements */
  #define CCOUNTER_OVERHEAD (8) /* overhead measuring the cycles, empirical value */
#elif defined(CPU_LPC845M301JBD48)
  #define CCOUNTER_OVERHEAD (0) /* overhead measuring the cycles, empirical value */
#endif

uint32_t CCounter_startCounter, CCounter_stopCounter;

void CCounter_LogTime(const char *msg) {
  uint32_t cycles = CCounter_stopCounter-CCounter_startCounter;
  /* count in overhead */
  if (cycles>CCOUNTER_OVERHEAD) {
    cycles -= CCOUNTER_OVERHEAD;
  } else {
    cycles = 0;
  }
  uint32_t us = COUNT_TO_USEC(cycles, SystemCoreClock);
  printf("%s: cycles: %lu; time: %lu us\n", msg, cycles, us);
}

static void CCounter_Test_NOP(void) {
  /*! \todo Check execution time for a NOP instruction */
  CCOUNTER_START();
  __asm("nop");
  CCOUNTER_STOP();
  printf("nop: %d\n", (int)(CCounter_stopCounter-CCounter_startCounter));
  CCounter_LogTime("nop test");
}

/* ------------------------------------------------------------ */
void CCounter_Test(void) {
  CCounter_Test_NOP();

   uint32_t fputype = SCB_GetFPUType();
   switch(fputype) {
     default:
     case 0: printf("no FPU present\n"); break;
     case 1: printf("single precision FPU present\n"); break;
     case 2: printf("single plus double-precision FPU present\n"); break;
   }

   CCOUNTER_START();
   int i = 0;
   CCOUNTER_STOP();
   CCounter_LogTime("test");

   /*! \todo add more tests and measure time */
}

void CCounter_DeInit(void) {
}

#if defined(CPU_LPC845M301JBD48)
static void setFlashWaitStates(uint8_t nofWaits) {
  /* Configures the FLASHCFG with the FLASHTIM (Flash memory access time) at address 0x40040010.
  * By default the LPC845 sets it to 0x2 which is 3 system clock access time.
  * NOTE: e.g. for 30 MHz FRO a zero wait might create a HardFault: use 1 instead
  * */
  uint32_t val;

  val = (FLASH_CTRL->FLASHCFG) & ~FLASH_CTRL_FLASHCFG_FLASHTIM_MASK; /* must write back all other bits exactly as read! */
  switch(nofWaits) {
    default:
    case 0:
    val |= 0x0;   /* 1 system clock access time */
    break;
    case 1:
    val |= 0x1;   /* 2 system clock access time */
    break;
    case 2:
    val |= 0x2;   /* 3 system clock access time */
    break;
  }
  /* write back settings */
  FLASH_CTRL->FLASHCFG = val;
}
#endif

void CCounter_Init(void) {
  CCounter_startCounter = CCounter_stopCounter = 0;
#if defined(CPU_MK22FN512VDC12)
  /* note: HW cycle counter only exists on M3 or higher. Without debugger attached, need t initialize counter */
  #define McuArmTools_DEMCR                   (*((volatile uint32_t*)0xE000EDFC))
    /*!< DEMCR: Debug Exception and Monitor Control Register */
  #define McuArmTools_TRCENA_BIT              (1UL<<24)
    /*!< Trace enable bit in DEMCR register */
  McuArmTools_DEMCR |= McuArmTools_TRCENA_BIT;
#elif defined(CPU_LPC845M301JBD48)
  CT_Init(); /* initialize timer on LPC */
  setFlashWaitStates(0);
#endif
}

